   CSES
   doooom â€” Dark mode Log out

CSES Problem Set

Distinct Routes

     * Task
     * Submit
     * Results
     * Statistics

   CAPTION: Submission details

   Task:            Distinct Routes
   Sender:          doooom
   Submission time: 2024-01-04 20:13:55 +0200
   Language:        C++
   Status:          READY
   Result:          WRONG ANSWER

   CAPTION: Test results

   test   verdict     time
   #1   ACCEPTED     0.00 s details
   #2   ACCEPTED     0.00 s details
   #3   ACCEPTED     0.01 s details
   #4   ACCEPTED     0.00 s details
   #5   ACCEPTED     0.00 s details
   #6   ACCEPTED     0.00 s details
   #7   ACCEPTED     0.00 s details
   #8   ACCEPTED     0.00 s details
   #9   ACCEPTED     0.00 s details
   #10  ACCEPTED     0.00 s details
   #11  ACCEPTED     0.00 s details
   #12  ACCEPTED     0.00 s details
   #13  ACCEPTED     0.00 s details
   #14  ACCEPTED     0.00 s details
   #15  WRONG ANSWER 0.00 s details
   #16  ACCEPTED     0.00 s details
   #17  WRONG ANSWER 0.00 s details
   #18  ACCEPTED     0.00 s details

Compiler report

input/code.cpp: In function 'int main()':
input/code.cpp:51:10: warning: ignoring return value of 'int scanf(const char*, ...)' declared with attribu
te 'warn_unused_result' [-Wunused-result]
   51 |     scanf("%d %d", &n, &m);
      |     ~~~~~^~~~~~~~~~~~~~~~~
input/code.cpp:54:14: warning: ignoring return value of 'int scanf(const char*, ...)' declared with attribu
te 'warn_unused_result' [-Wunused-result]
   54 |         scanf("%d %d", &u, &v);
      |         ~~~~~^~~~~~~~~~~~~~~~~

Code

#include <bits/stdc++.h>
using namespace std;
int n, m;
struct edge {
    int u, v;
};
edge e[1001];
unordered_set<int> ee[501];
int vis[501], e_vis[1001], res, cur_vis_e[1001];
int distinguish_path_cnt = 0;
vector<vector<int>> paths;
vector<int> cur_path;

int find_path(int u) {
    cur_path.push_back(u);
    if (u == n) return 1;
    vis[u] = 1;
    for (int ei : ee[u]) {
        if (e_vis[ei] or cur_vis_e[ei]) continue;
        int v;
        if (u == e[ei].u)
            v = e[ei].v;
        else
            v = e[ei].u;
        if (vis[v]) continue;
        cur_vis_e[ei] = 1;
        if (find_path(v)) return 1;
        // cur_vis_e[ei] = 0;
    }
    vis[u] = 0;
    cur_path.pop_back();
    return 0;
}

int find_to_cut(int p_i) {
    for (int i : paths[p_i]) e_vis[i] = 0;
    for (int i : paths[p_i]) {
        e_vis[i] = 1;
        memset(vis, 0, sizeof(vis));
        memset(cur_vis_e, 0, sizeof(cur_vis_e));
        if (find_path(1) == 0) {
            // e_vis[i] = 0;
            return i;
        }
        e_vis[i] = 0;
    }
    return 0;
}

int main() {
    scanf("%d %d", &n, &m);
    for (int i = 1; i <= m; i++) {
        int u, v;
        scanf("%d %d", &u, &v);
        e[i].u = u, e[i].v = v;
        ee[u].insert(i);
        // ee[v].insert(i);
    }
    do {
        memset(vis, 0, sizeof(vis));
        memset(cur_vis_e, 0, sizeof(cur_vis_e));
        cur_path.clear();
        res = find_path(1);
        if (res) {
            paths.push_back(cur_path);
            vector<int> path;
            for (int i = 1; i <= m; i++)
                if (cur_vis_e[i]) path.push_back(i), e_vis[i] = 1;
            // paths.push_back(path);
            distinguish_path_cnt += res;
        }
    } while (res);
    cout << distinguish_path_cnt << endl;
    for (auto path : paths) {
        printf("%ld\n", path.size());
        for (int i : path) printf("%d ", i);
        printf("\n");
    }
}

     * Share code to others

Test details

Test 1

   Verdict: ACCEPTED
   input
   2 1
   1 2
   view save
   correct output
   1
   2
   1 2
   view save
   user output
   1
   2
   1 2
   view save

Test 2

   Verdict: ACCEPTED
   input
   4 2
   1 2
   3 4
   view save
   correct output
   0
   view save
   user output
   0
   view save

Test 3

   Verdict: ACCEPTED
    input
   500 996
   1 2
   2 500
   1 3
   3 500
   ...
   view save
   correct output
   498
   3
   1 2 500
   3
   1 3 500
   ...
   view save
   user output
   498
   3
   1 499 500
   3
   1 498 500
   ...
   view save

Test 4

   Verdict: ACCEPTED
    input
   500 499
   1 2
   2 3
   3 4
   4 5
   ...
   view save
   correct output
   1
   500
   1 2 3 4 5 6 7 8 9 10 11 12 13 ...
   view save
   user output
   1
   500
   1 2 3 4 5 6 7 8 9 10 11 12 13 ...
   view save

Test 5

   Verdict: ACCEPTED
   input
   2 1
   2 1
   view save
   correct output
   0
   view save
   user output
   0
   view save

Test 6

   Verdict: ACCEPTED
    input
   40 1000
   25 22
   15 24
   7 33
   16 32
   ...
   view save
   correct output
   21
   44
   1 35 39 34 29 32 22 38 20 30 1...
   view save
   user output
   21
   7
   1 14 13 7 22 17 40
   7
   1 16 15 39 27 25 40
   ...
   view save

Test 7

   Verdict: ACCEPTED
    input
   75 1000
   72 6
   46 66
   63 45
   70 46
   ...
   view save
   correct output
   12
   30
   1 29 24 9 18 63 45 31 66 72 6 ...
   view save
   user output
   12
   8
   1 29 32 26 19 53 63 75
   39
   1 70 7 31 3 20 43 21 5 66 9 61...
   view save

Test 8

   Verdict: ACCEPTED
    input
   100 1000
   75 97
   7 62
   88 25
   36 44
   ...
   view save
   correct output
   9
   51
   1 35 15 86 79 34 43 94 83 75 9...
   view save
   user output
   9
   2
   1 100
   61
   1 6 97 84 31 57 94 17 24 20 79...
   view save

Test 9

   Verdict: ACCEPTED
   input
   3 2
   1 2
   2 3
   view save
   correct output
   1
   3
   1 2 3
   view save
   user output
   1
   3
   1 2 3
   view save

Test 10

   Verdict: ACCEPTED
   input
   11 12
   1 2
   2 3
   3 4
   4 5
   ...
   view save
   correct output
   2
   6
   1 2 3 4 5 11
   7
   1 6 7 8 9 10 11
   view save
   user output
   2
   7
   1 6 7 8 9 10 11
   6
   1 2 3 4 5 11
   view save

Test 11

   Verdict: ACCEPTED
   input
   8 9
   1 2
   2 3
   3 8
   1 4
   ...
   view save
   correct output
   2
   5
   1 2 6 7 8
   5
   1 4 5 3 8
   view save
   user output
   2
   5
   1 4 5 3 8
   5
   1 2 6 7 8
   view save

Test 12

   Verdict: ACCEPTED
   input
   8 9
   1 2
   1 3
   2 3
   3 4
   ...
   view save
   correct output
   1
   8
   1 2 3 4 5 6 7 8
   view save
   user output
   1
   7
   1 3 4 5 6 7 8
   view save

Test 13

   Verdict: ACCEPTED
   input
   7 9
   1 2
   1 3
   2 7
   3 4
   ...
   view save
   correct output
   3
   3
   1 2 7
   4
   1 3 5 7
   ...
   view save
   user output
   3
   5
   1 6 3 5 7
   4
   1 3 4 7
   ...
   view save

Test 14

   Verdict: ACCEPTED
   input
   7 15
   3 6
   5 2
   5 4
   3 5
   ...
   view save
   correct output
   2
   5
   1 2 3 6 7
   4
   1 4 5 7
   view save
   user output
   2
   4
   1 4 5 7
   5
   1 2 3 6 7
   view save

Test 15

   Verdict: WRONG ANSWER
    input
   500 986
   244 252
   224 22
   81 484
   273 432
   ...
   view save
   correct output
   116
   5
   1 129 142 473 500
   5
   1 63 158 171 500
   ...
   view save
   user output
   77
   5
   1 152 416 438 500
   7
   1 180 367 47 478 363 500
   ...
   view save

Test 16

   Verdict: ACCEPTED
    input
   122 199
   1 2
   1 3
   2 4
   2 5
   ...
   view save
   correct output
   1
   42
   1 82 83 84 85 86 87 88 89 90 9...
   view save
   user output
   1
   42
   1 82 83 84 85 86 87 88 89 90 9...
   view save

Test 17

   Verdict: WRONG ANSWER
   input
   22 61
   1 2
   1 3
   1 4
   1 5
   ...
   view save
   correct output
   10
   4
   1 2 18 22
   4
   1 3 16 22
   ...
   view save
   user output
   9
   4
   1 11 20 22
   4
   1 10 15 22
   ...
   view save

Test 18

   Verdict: ACCEPTED
   input
   9 12
   1 2
   1 3
   3 9
   2 3
   ...
   view save
   correct output
   3
   5
   1 2 6 7 9
   4
   1 3 8 9
   ...
   view save
   user output
   3
   6
   1 4 5 3 8 9
   3
   1 3 9
   ...
   view save

Graph Algorithms

   ... De Bruijn SequenceTeleporters PathHamiltonian FlightsKnight's TourDownload SpeedPolice
   ChaseSchool DanceDistinct Routes
     _____________________________________________________________________________________________

Your submissions

   2024-03-11 01:37:28 2024-03-09 00:12:39 2024-03-08 23:00:31 2024-03-08 22:48:33 2024-03-08
   20:26:49 2024-03-08 07:04:25 2024-03-08 06:59:43 2024-03-08 01:04:46 2024-03-08 00:57:39
   2024-03-07 23:40:10 2024-01-05 06:14:57 2024-01-05 05:12:49 2024-01-04 20:13:55 2024-01-04
   20:12:38 2024-01-04 19:47:41 2024-01-04 19:44:06 2024-01-04 19:42:43 2024-01-04 19:27:34
   2024-01-04 19:25:33
