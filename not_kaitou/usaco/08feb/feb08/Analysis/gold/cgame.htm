<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0045)http://ace.delos.com/TESTDATA/FEB08.cgame.htm -->
<HTML><HEAD><TITLE>USACO FEB08 cgame Analysis</TITLE>
<META http-equiv=Content-Type content="text/html; charset=gb2312">
<META content="MSHTML 6.00.2600.0" name=GENERATOR></HEAD>
<BODY bgColor=#ffffff>
<CENTER><IMG height=118 src="cgame.files/cow1.jpg" width=742></CENTER>
<H2>USACO FEB08 Problem 'cgame' Analysis</H2>
<H4>by Richard Peng</H4>
<P>The first observation we can make is that the dimensions are independent of 
each other. So the problem is essentially the following: 
<UL>
  <LI>Given N numbers, divide them into two groups such that the sum of the two 
  groups is as close as possible. 
  <LI>This is the well-known knapsack problem, but the bounds of this problem 
  makes the 'standard' DP approach not viable. That's the reason this problem is 
  output only and the solution is by hacking. </LI></UL>
<P>There are, of course, many ways to hack this. My code used three techniques, 
which are: 
<UL>
  <LI>If N is small, try all possibilities. 
  <LI>Sort the numbers in decreasing size order, then loop through them and 
  assign numbers to the group with smaller sum. 
  <LI>After the previous step, run many iterations of the following: 
  <UL>
    <LI>pick two numbers, one from each group 
    <LI>if swapping them decreases the difference, swap with high probability, 
    </LI></UL>otherwise, swap with low probability. </LI></UL>
<P>These three can get most of the points in a few seconds of CPU time. There 
are a few other interesting techniques that's worth trying. Most are variants of 
three where instead of swapping two elements, the groups are broken into 
'chunks' and swapped either greedily or using something along the idea of second 
step. The following is another interesting approach suggested by John Pardon: 
<P>Suppose we want to partition a set of positive numbers into two sets of 
similar size. Create a graph whose vertices are these numbers. Also, each 
component of the graph will have a 'potential', initially equal to the value of 
the only vertex in each component. Each component also has a 'head'. 
Iteratively, take the to components with the highest potential. Insert an edge 
between their heads, make the potential equal to the difference of the previous 
potentials, and make the new head the head of the component whose initial 
potential was greater. Eventually there is one component, a tree. Two-coloring 
this tree gives an excellent partition. 
<P>One possible code to compute the answers from our contest director: <PRE>#include&lt;cstdio&gt;
#include&lt;cstdlib&gt;
#include&lt;ctime&gt;
#include&lt;cmath&gt;
#include&lt;set&gt;
using namespace std;

#define K 2000000
#define lint long long

lint N, Nr[2],ar[2][50000];
lint L[50000][2];
set&lt; pair&lt;lint, lint&gt; &gt; S;

lint abso(lint x) {
    return x&lt;0?-x:x;
}

int main() {
    lint i,j,r,k,diff,dis,tn;
    freopen("cgame.in","r",stdin);
    freopen("cgame.out","w",stdout);
    srand(time(0));
    scanf("%d %d",&amp;tn,&amp;N);
    N--;
    for(i=0;i&lt;N;i++) {
        scanf("%d %d",&amp;L[i][0],&amp;L[i][1]);
    }
    if(N&lt;=30) {
        for(r=0;r&lt;2;r++) {
            for(k=0;k&lt;(1&lt;&lt;N);k++) {
                dis = 0;
                for(i=0;i&lt;N;i++) {
                    ar[r][i] = (k&amp;(1&lt;&lt;i))==0?1:-1;
                    dis+=L[i][r]*ar[r][i];
                }
                if(dis==0) break;
            }
        }
    } else {
        for(r=0;r&lt;2;r++) {
            
            for(i=0;i&lt;N;i++) {
                S.insert(make_pair(-L[i][r],i));
            }
            
            Nr[0]=Nr[1]=0;

            for(i=0;i&lt;N;i++) {
                pair&lt;int,int&gt; t = *S.begin();
                S.erase(t);
                if(Nr[0]&gt;Nr[1]) {
                    ar[r][t.second]=1;
                    Nr[1]-=t.first;
                } else {
                    ar[r][t.second]=-1;
                    Nr[0]-=t.first;
                }
            }
            
            dis = Nr[0]-Nr[1];

            for(k=0;k&lt;K;k++) {
                i=j=0;
                while(ar[r][i]==ar[r][j]) {
                    i = rand()%N;
                    j = rand()%N;
                }
                if(ar[r][i]==1) i^=j^=i^=j;
                diff = L[i][r]-L[j][r];
                if((dis&gt;0&amp;&amp;diff&gt;0)||(dis&lt;0&amp;&amp;diff&lt;0)) {
                    if(abso(dis-2*diff)*exp(-K/(k+1.0)-1)&lt;=abso(dis)) {
                        dis -= 2*diff;
                        Nr[0] -= diff;
                        Nr[1] += diff;
                        ar[r][i]=1;
                        ar[r][j]=-1;
                    }
                }
            }

        }
    }
    printf("#FILE cgame %d\n",tn);
    i=j=0;
    for(k=0;k&lt;=N;k++) {
        printf("%I64d %I64d\n",i,j);
        i += L[k][0]*ar[0][k];
        j += L[k][1]*ar[1][k];
    }
    return 0;
}
</PRE></BODY></HTML>
