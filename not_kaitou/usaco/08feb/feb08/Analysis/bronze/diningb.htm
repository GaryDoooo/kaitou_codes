<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0047)http://ace.delos.com/TESTDATA/FEB08.diningb.htm -->
<HTML><HEAD><TITLE>USACO FEB08 diningb Analysis</TITLE>
<META http-equiv=Content-Type content="text/html; charset=gb2312">
<META content="MSHTML 6.00.2600.0" name=GENERATOR></HEAD>
<BODY bgColor=#ffffff>
<CENTER><IMG height=118 src="diningb.files/cow1.jpg" width=742></CENTER>
<H2>USACO FEB08 Problem 'diningb' Analysis</H2>
<H4>by Rob Kolstad</H4>
<P>This problem asks us to change a list of 1's and 2's to a list of 0 or more 
1's followed by 0 or more 2's. The trick is to change as few of the digits as 
possible. 
<P>A quick exercise with pencil and paper coupled with a tiny bit of insight 
yields the idea that one can change 1's to 2's start on the right side of the 
string and 2's to 1's on the left side of the string. Some combination will have 
the smallest number of changes. 
<P>My program below calculates the counts of changing digits both from left to 
right and also right to left. It then examines those results to find the 
location at which the sum of the changes (the point at which we quit changing 
2's to 1's and start changing 1's to 2's) is minimized. This is an 'ad hoc' 
algorithm: Just requires insight, no special theory or background. <PRE>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
 
main () {
    FILE *fin = fopen ("diningb.in", "r");
    FILE *fout = fopen ("diningb.out", "w");
    int i, n;
    int cards[30000+1], ones[30000+1], twos[30000+1], min;
    fscanf (fin, "%d", &amp;n);
    for (i = 0; i &lt; n; i++)
        fscanf (fin, "%d", &amp;cards[i]);
    if (cards[0] == 2) ones[0] = 1;
    else               ones[0] = 0;
    for (i = 1; i &lt; n; i++)
        if (cards[i] == 2) ones[i] = ones[i-1]+1;
        else               ones[i] = ones[i-1];
    ones[n] = ones[n-1];
    if (cards[n-1] == 1) twos[n-1] = 1;
    else                 twos[n-1] = 0;
    for (i = n-2; i &gt;= 0; i--)
        if (cards[i] == 1) twos[i] = twos[i+1]+1;
        else               twos[i] = twos[i+1];
    twos[n] = 0;
    min = twos[0];
    for (i = 0; i &lt; n; i++)
        if (ones[i] + twos[i+1] &lt; min)
            min = ones[i] + twos[i+1];
    fprintf (fout, "%d\n", min);
    exit (0);
}
</PRE></BODY></HTML>
